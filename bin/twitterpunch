#! /usr/bin/env ruby

require 'rubygems'
require 'twitter'
require 'optparse'
require "net/http"
require 'fileutils'
require 'yaml'

require 'twitterpunch'

FileUtils.mkdir_p File.expand_path('~/.twitterpunch')

configfile = File.expand_path('~/.twitterpunch/config.yaml')
config     = YAML.load_file(configfile) rescue {}

optparse = OptionParser.new { |opts|
  opts.banner = "Usage : twitterpunch [options] [filename]

    Twitterpunch is designed to work with PhotoBooth and OS X Folder Actions.
    When this script is called with the name of an image file, it will post the
    image to Twitter, along with a randomly chosen message and a hashtag.

    If you call the script with the --stream argument instead, it will listen
    for tweets to that hashtag and display them in a slideshow. If the tweet
    came from another user, Twitterpunch will speak it aloud.

"

  opts.on("-d", "--debug", "Display extra debugging information.") do
    config[:debug] = true
  end

  opts.on("-s", "--stream", "Stream tweets from the specified hashtag.") do
    config[:action] = :stream
  end

  opts.on("--view", "Run photo slideshow viewer only.") do
    config[:action] = :view
  end

  opts.on("--authorize", "Authorize Twitterpunch with Twitter and update the configuration file.") do
    config[:action] = :authorize
  end
  opts.on("--configure", "Generate default configuration (other than Twitter authorization).") do
    config[:action] = :configure
  end

  opts.on("-i", "--remote", "Start the Twitterpunch remote web service") do
    config[:action] = :remote
  end

  opts.on("-r", "--install", "Install the Folder Action workflow (OS X only).") do
    config[:action] = :install
  end

  opts.on("-t", "--test", "Load up Pry debugging console.") do
    config[:action] = :test
  end

  opts.on("-v", "--version", "Display version information.") do
    puts "Twitterpunch v#{Twitterpunch::VERSION}"
    exit 0
  end

  opts.separator('')

  opts.on("-h", "--help", "Displays this help") do
    puts opts
    exit
  end
}
optparse.parse!

config[:action]       = :post if ARGV.size > 0 and config[:action].nil?
config[:resources]    = File.expand_path("#{File.dirname(__FILE__)}/../resources")
config[:statefile]    = File.expand_path('~/.twitterpunch/state.yaml')
config[:queue]        = {}
config[:queue][:file] = File.expand_path('~/.twitterpunch/queue.yaml')
config[:queue][:ttl]  = 30

FileUtils.touch(config[:queue][:file])
FileUtils.touch(config[:statefile])

case config[:action]
when :stream
  require 'twitterpunch/streamer'
  require 'twitterpunch/viewer'

  viewer = Twitterpunch::Viewer.new(config)

  config[:state]   = YAML.load_file(config[:statefile]) rescue {}
  config[:display] = viewer

  Twitterpunch::Streamer.new(config).thread
  viewer.run

  File.open(config[:statefile], 'w') {|f| f.write(config[:state].to_yaml) }

when :post
  require 'twitterpunch/poster'
  client = Twitterpunch::Poster.new(config)
  client.post(ARGV)

when :view
  require 'twitterpunch/viewer'

  config[:state] = YAML.load_file(config[:statefile]) rescue {}

  viewer = Twitterpunch::Viewer.new(config)
  viewer.run

when :authorize
  require 'twitterpunch/configuration'
  cfg = Twitterpunch::Configuration.new(configfile)
  cfg.authorize
  cfg.save

when :configure
  require 'twitterpunch/configuration'
  cfg = Twitterpunch::Configuration.new(configfile)
  cfg.configure
  cfg.save

when :install
  system('open', "#{config[:resources]}/Twitterpunch.workflow")

when :remote
  require 'twitterpunch/remote'
  options = {
    :port  => 8080,
    :bind  => '0.0.0.0',
    :queue => Twitterpunch::Queue.new(config),
  }

  Twitterpunch::Remote.run! options

when :test
  require 'pry'
  binding.pry

else
  puts "Run twitterpunch --help for usage."
  exit 1
end

